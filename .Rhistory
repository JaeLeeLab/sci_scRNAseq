geom_point(mapping = aes(color = sample_id), size = 1, alpha = 0.5) +
facet_wrap(. ~ time, nrow = 2) +
scale_color_manual(values = sample_cols) +
umap_theme +
theme(strip.text = element_text(size = 14, color = 'black'),
legend.title = element_text(size = 12, color = 'black')) +
guides(color = guide_legend(title = 'Sample ID\n(colored by\nreplicate)', override.aes = list(size = 7, alpha = 1)))
umap_sample
ggsave(filename = './results/revision_figures/macroglia_bySample_umap.tiff',
plot = umap_sample, device = 'tiff', height = 7, width = 8.5)
rm(list = ls())
gc()
dev.off()
require('Seurat')
require('dplyr')
require('ggplot2')
# Use gProfiler, use output
mg_go_results <- readxl::read_xlsx(path = 'results/revision_figures/microglia_GO_terms.xlsx')
h_mg <- mg_go_results[c(1,2)]
a_mg <- mg_go_results[c(4,5)]
b_mg <- mg_go_results[c(7,8)]
c_mg <- mg_go_results[c(10,11)]
mg_go_results <- list('H-Microglia' = h_mg,
'Inflammatory-Microglia' = a_mg,
'Dividing-Microglia' = b_mg,
'Migrating-Microglia' = c_mg)
for (i in 1:length(mg_go_results)) {
colnames(mg_go_results[[i]]) <- c('GO term', 'adj. p-value')
mg_go_results[[i]]$Cluster = names(mg_go_results)[i]
mg_go_results[[i]] <- mg_go_results[[i]][!apply(is.na(mg_go_results[[i]]), any, MARGIN = 1),]
}
mg_go_results <- Reduce(rbind, mg_go_results)
mg_go_results$log_pval <- -log10(mg_go_results$`adj. p-value`)
mg_go_results$tmp_id <- paste(
mg_go_results$Cluster,
mg_go_results$`GO term`,
sep = '_'
)
mg_go_results
mg_go_results$Cluster
mg_go_results$Cluster <- factor(
x = mg_go_results$Cluster,
levels = c('H-Microglia','Inflammatory-Microglia','Dividing-Microglia','Migrating-Microglia')
)
mg_go_plot <- mg_go_results %>%
group_by(Cluster) %>%
top_n(n = 15, wt = log_pval) %>%
ungroup() %>%
ggplot(mapping = aes(x = log_pval, y = reorder(tmp_id, log_pval))) +
geom_bar(fill = 'grey80',
color = 'black',
stat = 'identity') +
facet_wrap(. ~ Cluster, scales = 'free_y', drop = TRUE, ncol = 2) +
scale_x_continuous(breaks = seq(0, 100, 5)) +
scale_y_discrete(labels = function(x) sub("[^*_]+_", "", x)) +
ylab(label = 'GO Term') +
xlab(label = 'log10(adj. p-value)') +
theme(panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
plot.title = element_text(size = 16, color = 'black'),
strip.text = element_text(size = 16, color = 'black'),
strip.background = element_rect(color = 'black'),
axis.title = element_text(size = 14, color = 'black'),
axis.title.y = element_blank(),
axis.text = element_text(size = 12, color = 'black'),
legend.title = element_text(size = 14, color = 'black'),
legend.text = element_text(size = 12, color = 'black'))
mg_go_plot
ggsave(filename = './results/revision_figures/microglia_GO_plot.tiff',
plot = mg_go_plot, device = 'tiff', height = 8, width = 14)
rm(list = ls())
gc()
dev.off()
library('Seurat')
library('dplyr')
library('ggplot2')
library('WGCNA')
require('doParallel')
myeloid <- readRDS('./data/myeloid.rds')
DefaultAssay(myeloid) <- 'RNA'
macrophage <- c('Monocyte','Macrophage-A','Macrophage-B')
macrophage <- myeloid[,myeloid$myeloid_subcluster %in% macrophage]
high_genes <- Matrix::rowSums(macrophage[['RNA']]@counts) > 0.5*sqrt(ncol(macrophage))
macrophage <- macrophage[high_genes,]
test <- macrophage[, sample(x = 1:ncol(macrophage), size = 300)]
test
mac_mat <- Matrix::t(test[['RNA']]@data)
colnames(mac_mat)
t(test[['RNA']]@data)
class(mac_mat)
mac_mat <- data.frame(Matrix::t(test[['RNA']]@data))
mac_mat
powers <- c(seq(4, 10, by = 1), seq(12, 20, by = 2))
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
corFnc = stats::cor,
corOptions = list(method = 'spearman'),
networkType = "unsigned"
)
high_genes <- Matrix::rowSums(macrophage[['RNA']]@counts) > sqrt(ncol(macrophage))
macrophage <- c('Monocyte','Macrophage-A','Macrophage-B')
macrophage <- myeloid[,myeloid$myeloid_subcluster %in% macrophage]
high_genes <- Matrix::rowSums(macrophage[['RNA']]@counts) > sqrt(ncol(macrophage))
high_genes
table(high_genes)
Matrix::rowMeans(macrophage[['RNA']]@counts) > 0.1
table(Matrix::rowMeans(macrophage[['RNA']]@counts) > 0.1)
high_genes <- Matrix::rowMeans(macrophage[['RNA']]@counts) > 0.1
test <- macrophage[high_genes, sample(x = 1:ncol(macrophage), size = 300)]
mac_mat <- data.frame(Matrix::t(test[['RNA']]@data))
powers <- c(seq(4, 10, by = 1), seq(12, 20, by = 2))
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
corFnc = stats::cor,
corOptions = list(method = 'spearman'),
networkType = "unsigned"
)
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 1.3
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",
ylab="Scale Free Topology Model Fit, signed R^2",
type="n",
main = paste("Scale independence"))
text(x = sft$fitIndices[,1],
y = -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers,
cex = cex1,
col="red")
# Red line corresponds to using an R^2 cut-off
abline(h = 0.80, col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
text(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
labels = powers,
cex = cex1,
col = "red")
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
# corFnc = stats::cor,
# corOptions = list(method = 'spearman'),
# networkType = "unsigned",
vebose = 5
)
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
# corFnc = stats::cor,
# corOptions = list(method = 'spearman'),
# networkType = "unsigned",
verbose = 5
)
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 1.3
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",
ylab="Scale Free Topology Model Fit, signed R^2",
type="n",
main = paste("Scale independence"))
text(x = sft$fitIndices[,1],
y = -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers,
cex = cex1,
col="red")
# Red line corresponds to using an R^2 cut-off
abline(h = 0.80, col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
text(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
labels = powers,
cex = cex1,
col = "red")
softPower = 9
adj <- adjacency.fromSimilarity(
similarity = mac_cor,
type = 'unsigned',
power = softPower
)
adj <- adjacency.fromSimilarity(
similarity = mac_mat,
# type = 'unsigned',
power = softPower
)
adj <- adjacency(
similarity = mac_mat,
# type = 'unsigned',
power = softPower
)
adj <- adjacency(
datExpr = mac_mat,
# type = 'unsigned',
power = softPower
)
# Turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM <- TOMsimilarity(
adjMat = adj,
# TOMType = "unsigned"
)
SubGeneNames <- colnames(adj)
colnames(TOM) <- rownames(TOM) <- SubGeneNames
dissTOM <- 1 - TOM
geneTree = hclust(as.dist(dissTOM), method = "average");
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
par(mfrow = c(1,1))
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
DefaultAssay(myeloid) <- 'integrated'
high_genes <- VariableFeatures(myeloid)
test <- macrophage[high_genes, sample(x = 1:ncol(macrophage), size = 300)]
mac_mat <- data.frame(Matrix::t(test[['RNA']]@data))
powers <- c(seq(4, 10, by = 1), seq(12, 20, by = 2))
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
# corFnc = stats::cor,
# corOptions = list(method = 'spearman'),
# networkType = "unsigned",
verbose = 5
)
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 1.3
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",
ylab="Scale Free Topology Model Fit, signed R^2",
type="n",
main = paste("Scale independence"))
text(x = sft$fitIndices[,1],
y = -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers,
cex = cex1,
col="red")
# Red line corresponds to using an R^2 cut-off
abline(h = 0.80, col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
text(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
labels = powers,
cex = cex1,
col = "red")
softPower = 7
adj <- adjacency(
datExpr = mac_mat,
# type = 'unsigned',
power = softPower
)
# Turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM <- TOMsimilarity(
adjMat = adj,
# TOMType = "unsigned"
)
SubGeneNames <- colnames(adj)
colnames(TOM) <- rownames(TOM) <- SubGeneNames
dissTOM <- 1 - TOM
geneTree = hclust(as.dist(dissTOM), method = "average");
par(mfrow = c(1,1))
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize)
table(dynamicMods)
test <- macrophage[high_genes, sample(x = 1:ncol(macrophage), size = 300)]
mac_mat <- data.frame(Matrix::t(test[['RNA']]@data))
test <- macrophage[high_genes, sample(x = 1:ncol(macrophage), size = 1000)]
mac_mat <- data.frame(Matrix::t(test[['RNA']]@data))
powers <- c(seq(4, 10, by = 1), seq(12, 20, by = 2))
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
corFnc = stats::cor,
corOptions = list(method = 'spearman'),
# networkType = "unsigned",
verbose = 5
)
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 1.3
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",
ylab="Scale Free Topology Model Fit, signed R^2",
type="n",
main = paste("Scale independence"))
text(x = sft$fitIndices[,1],
y = -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers,
cex = cex1,
col="red")
# Red line corresponds to using an R^2 cut-off
abline(h = 0.80, col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
text(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
labels = powers,
cex = cex1,
col = "red")
softPower = 7
adj <- adjacency(
datExpr = mac_mat,
# type = 'unsigned',
power = softPower
)
# Turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM <- TOMsimilarity(
adjMat = adj,
# TOMType = "unsigned"
)
SubGeneNames <- colnames(adj)
colnames(TOM) <- rownames(TOM) <- SubGeneNames
dissTOM <- 1 - TOM
geneTree = hclust(as.dist(dissTOM), method = "average");
par(mfrow = c(1,1))
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize)
table(dynamicMods)
?pickSoftThreshold
# cl <- parallel::makeCluster(2)
# doParallel::registerDoParallel(cl = cl)
# disableWGCNAThreads()
sft <- pickSoftThreshold(
data = mac_mat,
# dataIsExpr = FALSE,
powerVector = powers,
corFnc = stats::cor,
corOptions = list(method = 'spearman'),
networkType = "signed",
verbose = 5
)
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 1.3
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",
ylab="Scale Free Topology Model Fit, signed R^2",
type="n",
main = paste("Scale independence"))
text(x = sft$fitIndices[,1],
y = -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers,
cex = cex1,
col="red")
# Red line corresponds to using an R^2 cut-off
abline(h = 0.80, col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity"))
text(x = sft$fitIndices[,1],
y = sft$fitIndices[,5],
labels = powers,
cex = cex1,
col = "red")
softPower = 12
adj <- adjacency(
datExpr = mac_mat,
type = 'signed',
power = softPower
)
# Turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM <- TOMsimilarity(
adjMat = adj,
TOMType = "signed"
)
SubGeneNames <- colnames(adj)
colnames(TOM) <- rownames(TOM) <- SubGeneNames
dissTOM <- 1 - TOM
geneTree = hclust(as.dist(dissTOM), method = "ward.D2");
par(mfrow = c(1,1))
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
geneTree = hclust(as.dist(dissTOM), method = "average");
par(mfrow = c(1,1))
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize)
table(dynamicMods)
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Calculate eigengenes
MEList = moduleEigengenes(mac_mat, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# Call an automatic merging function
merge = mergeCloseModules(mac_mat, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs
nGenes = ncol(mac_mat);
nSamples = nrow(mac_mat);
MEs0 = moduleEigengenes(mac_mat, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitCor = cor(MEs, macrophage@meta.data, use = "p");
rm(list = ls())
gc()
dev.off()

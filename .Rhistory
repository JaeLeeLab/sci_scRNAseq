il6_genes <- c(il6_ligs, il6_recs)
# Take "known" interactions only
known_lr <- lr_ref$Pair.Name[lr_ref$Pair.Source == 'known']
ligand_celltypes <- c('Monocyte',
'Chemotaxis-Inducing Mac',
'Inflammatory Mac',
'Homeostatic Microglia',
'Inflammatory Microglia',
'Migrating Microglia',
'Dividing Microglia',
'Fibroblast',
'Astroependymal',
'OPC')
receptor_celltypes <- c('Astroependymal',
'Astrocyte',
'Oligodendrocyte',
'OPC',
'Pericyte',
'Fibroblast')
# Reproduce manuscript figure
il6_data <- lr_results %>%
filter(Ligand_cell %in% ligand_celltypes) %>%
filter(Receptor_cell %in% receptor_celltypes) %>%
filter(Ligand %in% il6_genes & Receptor %in% il6_genes) %>%
filter(Ligand_cell_pct >= 2.5 & Receptor_cell_pct >= 2.5) %>%
filter(Pair_name %in% known_lr) %>%
filter(!Pair_name %in% c('Osm_Lifr')) %>%
mutate(Receptor_cell = plyr::mapvalues(x = Receptor_cell, from = 'Astroependymal', to = 'Astroepen.')) %>%
mutate(Ligand_cell = plyr::mapvalues(x = Ligand_cell, from = 'Astroependymal', to = 'Astroepen.'))
max_score <- ceiling(max(il6_data$Score)*10)/10
min_score <- floor(min(il6_data$Score)*10)/10
il6_plot <- il6_data %>%
ggplot() +
geom_point(mapping = aes(x = Ligand_cell, y = Pair_name, size = log_pval, fill = Score),
color = 'black',
pch = 21) +
facet_grid(time ~ Receptor_cell, switch = 'x', drop = TRUE) +
scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = 'Spectral')),
breaks = c(min_score, 0.5, max_score),
limits = c(min_score, max_score),
labels = c(min_score,0.5, max_score)) +
scale_radius(limits = c(0,NA), range = c(1,6)) +
scale_y_discrete(position = 'left') +
scale_x_discrete(position = 'top') +
xlab(label = 'Ligand cell') +
ylab(label = 'Ligand_Receptor Pair') +
theme(strip.text = element_text(size = 12, color = 'black', face = 'bold'),
strip.background = element_rect(fill = NA, color = NA),
axis.title.x.top = element_text(size = 12, color = 'black', face = 'bold'),
axis.title.y.left = element_text(size = 12, color = 'black', face = 'bold'),
axis.text = element_text(size = 12, color = 'black'),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 12, color = 'black'),
legend.title = element_text(size = 12, color = 'black', angle = 90, face = 'bold', hjust = 0.5),
legend.key = element_rect(fill = NA),
panel.background = element_rect(fill = NA, color = 'black'),
panel.grid.major = element_line(size = 0.5, linetype = 'dotted', color = 'grey70'),
legend.position = 'right',
legend.direction = 'vertical') +
guides(fill = guide_colorbar(title = 'Score',
title.position = 'left',
frame.linewidth = 1,
ticks.linewidth = 1,
frame.colour = 'black',
ticks.colour = 'black'),
size = guide_legend(title = '-log10(p-value)',
title.position = 'left',
override.aes = list(fill = 'black')))
il6_plot
rm(list = ls())
gc()
dev.off()
# libraries and directories
require('Seurat')
require('dplyr')
require('ggplot2')
require('scran')
require('parallel')
require('doParallel')
require('foreach')
require('ComplexHeatmap')
# data_in <- './data/'
# data_out <- './data/data_integration/'
results_out <- './results/macroglia_annotation_markers/'
ref_in <- './ref/'
ref_out <- './ref/'
# dir.create(path = data_out)
dir.create(path = results_out)
macroglia <- readRDS(file = './data/macroglia.rds')
# Goal here is to better characterize similarties/difference between the newly
# identified clusters (i.e. Astroependymal, OPC-A, and OPC-B). Exclude
# oligodendrocytes, pre-oligos, and div-OPCs bc their relationship is clearer.
DefaultAssay(macroglia) <- 'RNA'
Idents(macroglia) <- 'macroglia_subcluster'
# Find shared genes between astrocytes/astroependymal, and OPC-B/astroependymal
# de_genes <- FindAllMarkers(
#   object = macroglia,
#   assay = 'RNA',
#   slot = 'data',
#   only.pos = TRUE
# )
# write.table(x = de_genes, file = paste0(results_out, 'macroglia_de_genes.tsv'),
#             sep = '\t', quote = FALSE, row.names = TRUE, col.names = NA)
de_genes <- read.table(file = paste0(results_out, 'macroglia_de_genes.tsv'), header = TRUE, sep = '\t', row.names = 1)
astro_astroepen_shared <- intersect(
x = de_genes$gene[de_genes$cluster == 'Astrocyte' & de_genes$p_val_adj < 1e-10],
y = de_genes$gene[de_genes$cluster == 'Astroependymal' & de_genes$p_val_adj < 1e-10]
)
astro_astroepen_shared <- de_genes[order(de_genes$avg_logFC, decreasing = TRUE),][astro_astroepen_shared, 'gene'][1:15]
opcB_astroepen_shared <- intersect(
x = de_genes$gene[de_genes$cluster == 'OPC-B' & de_genes$p_val_adj < 1e-10],
y = de_genes$gene[de_genes$cluster == 'Astroependymal' & de_genes$p_val_adj < 1e-10]
)
opcB_astroepen_shared <- de_genes[order(de_genes$avg_logFC, decreasing = TRUE),][opcB_astroepen_shared, 'gene'][1:15]
#   logfc.threshold = 0,
#   only.pos = FALSE
# )
# opcA_opcB_de$which_high <- ifelse(
#   test = opcA_opcB_de$avg_logFC > 0,
#   yes = 'OPC-A',
#   no = 'OPC-B'
# )
# write.table(x = opcA_opcB_de, file = paste0(results_out, 'opcA_opcB_de_genes.tsv'),
#             sep = '\t', quote = FALSE, row.names = TRUE, col.names = NA)
opcA_opcB_de <- read.table(file = paste0(results_out, 'opcA_opcB_de_genes.tsv'),
header = TRUE, sep = '\t', row.names = 1)
opcA_opcB_genes <- opcA_opcB_de %>%
mutate('gene' = rownames(.)) %>%
mutate('cell' = ifelse(avg_logFC > 0, 'OPC-A','OPC-B')) %>%
group_by(cell) %>%
top_n(n = 10, wt = abs(avg_logFC)) %>%
.[['gene']]
#   logfc.threshold = 0.5,
#   only.pos = FALSE
# )
# astroependymal_ependymal_de$which_high <- ifelse(
#   test = astroependymal_ependymal_de$avg_logFC > 0,
#   yes = 'Astroependymal',
#   no = 'Ependymal'
# )
# write.table(x = astroependymal_ependymal_de, file = paste0(results_out, 'astroependymal_ependymal_de_genes.tsv'),
#             sep = '\t', quote = FALSE, row.names = TRUE, col.names = NA)
astroependymal_ependymal_de <- read.table(
file = paste0(results_out, 'astroependymal_ependymal_de_genes.tsv'),
header = TRUE, sep = '\t', row.names = 1)
astroependymal_ependymal_genes <- astroependymal_ependymal_de %>%
mutate('gene' = rownames(.)) %>%
top_n(n = 10, wt = abs(avg_logFC)) %>%
.[['gene']]
# Globally unique genes per cluster
unique_genes <- de_genes %>%
group_by(cluster) %>%
filter(p_val_adj < 1e-03) %>%
top_n(n = 7, wt = -p_val_adj) %>%
top_n(n = 7, wt = avg_logFC) %>%
ungroup() %>%
.[['gene']] %>%
unique()
# Cilia-associated genes (see: )
cilia_genes <- c(paste0('Cfap', c(20,36,43,44,45,52,53,54,69,70,77,100,126,161,206)),'Ccdc180','Odf3b','Fam183b','Tekt1','Dnah12','Sntn','Dnah6','Tmem107','Acta2','Stmn2','Tmsb10')
# Combine all genes to plot
all_genes <- unique(c(astro_astroepen_shared, opcB_astroepen_shared, opcA_opcB_genes, astroependymal_ependymal_genes, unique_genes, cilia_genes))
# Calculate scaled expression values
expr_data <- t(ScaleData(object = macroglia[['RNA']]@data[all_genes,],
scale.max = 4)) %>%
cbind(macroglia@meta.data[c('macroglia_subcluster')]) %>%
group_by(macroglia_subcluster) %>%
summarise(across(.cols = all_of(all_genes), .fns = mean)) %>%
tibble::column_to_rownames(var = 'macroglia_subcluster')
expr_data <- t(as.matrix(x = expr_data))
# Generate heatmap
cilia_heatmap <- Heatmap(
matrix = expr_data,
clustering_method_columns = 'ward.D2',
clustering_method_rows = 'ward.D2',
col = rev(
colorRampPalette(
colors = RColorBrewer::brewer.pal(
n = 11,
name = 'RdYlBu'
),
bias = 0.65
)(100)
),
border = TRUE,
clustering_distance_rows = 'pearson',
clustering_distance_columns = 'pearson',
column_dend_height = unit(x = 15, units = 'mm'),
row_dend_width = unit(x = 15, units = 'mm'),
column_names_rot = 45,
rect_gp = gpar(col = 'black'),
heatmap_legend_param = list(
title = 'Scaled Expression',
title_gp = gpar(fontsize = 12),
title_position = 'leftcenter-rot',
labels = c('Low', 0, 'High'),
at = c(min(expr_data), 0, max(expr_data)),
labels_gp = gpar(fontsize = 10),
legend_height = unit(2.5, units = 'cm'),
grid_width = unit(0.5, units = 'cm'),
border = 'black',
title_gap = unit(1, units = 'cm'),
direction = 'vertical'),
# column_km = 4,
)
draw(cilia_heatmap, heatmap_legend_side = 'right')
# Generate heatmap
cilia_heatmap <- Heatmap(
matrix = expr_data,
clustering_method_columns = 'ward.D2',
clustering_method_rows = 'ward.D2',
col = rev(
colorRampPalette(
colors = RColorBrewer::brewer.pal(
n = 11,
name = 'RdYlBu'
),
bias = 0.65
)(100)
),
border = TRUE,
clustering_distance_rows = 'pearson',
clustering_distance_columns = 'pearson',
column_dend_height = unit(x = 15, units = 'mm'),
row_dend_width = unit(x = 15, units = 'mm'),
column_names_rot = 45,
rect_gp = gpar(col = 'black'),
heatmap_legend_param = list(
title = 'z-score',
title_gp = gpar(fontsize = 12),
title_position = 'leftcenter-rot',
labels = c('Low', 0, 'High'),
at = c(min(expr_data), 0, max(expr_data)),
labels_gp = gpar(fontsize = 10),
legend_height = unit(2.5, units = 'cm'),
grid_width = unit(0.5, units = 'cm'),
border = 'black',
title_gap = unit(1, units = 'cm'),
direction = 'vertical'),
# column_km = 4,
)
draw(cilia_heatmap, heatmap_legend_side = 'right')
tiff(file = paste0(results_out, 'macroglia_cilia_heatmap.tiff'),
height = 21, width = 5.5, res = 420, units = 'in')
draw(cilia_heatmap, heatmap_legend_side = 'right')
dev.off()
rm(list = ls())
gc()
dev.off()
sci <- readRDS('./data/sci.rds')
require('Seurat')
gc()
sci <- readRDS('./data/sci.rds')
gc()
VlnPlot(sci, features = c('nCount_RNA','nFeature_RNA','percentmt'), group.by = 'sample_id', pt.size = 0)
VlnPlot(sci, features = c('nCount_RNA','nFeature_RNA','percent.mt'), group.by = 'sample_id', pt.size = 0)
VlnPlot(sci, features = c('nCount_RNA','nFeature_RNA','percent_mt'), group.by = 'sample_id', pt.size = 0)
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id')
ncount
require('ggplot2')
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10')
ncount
nfeat <- VlnPlot(sci, 'nFeature_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10')
nfeat
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10') +
geom_boxplot()
ncount
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10') +
geom_boxplot(width = 0.2)
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10') +
geom_boxplot(width = 0.2, outlier.size = 0)
ncount <- VlnPlot(sci, 'nCount_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10') +
geom_boxplot(width = 0.2, outlier.size = 0)
nfeat <- VlnPlot(sci, 'nFeature_RNA', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10') +
geom_boxplot(width = 0.2, outlier.size = 0)
ncoutn
ncount
mt <- VlnPlot(sci, 'percent.mt', pt.size = 0, group.by = 'sample_id')
mt
mt <- VlnPlot(sci, 'percent_mt', pt.size = 0, group.by = 'sample_id')
mt
mt <- VlnPlot(sci, 'percent_mt', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10')
mt
mt <- VlnPlot(sci, 'percent_mt', pt.size = 0, group.by = 'sample_id') +
scale_y_continuous(trans = 'log10',
breaks = c(0.001, 0.01, 0.03, 0.1, 0.2, 1))
mt
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
labs(subtitle = 'Red lines label MAD thresholds.') +
geom_point(data = umi_cutoffs_gg, mapping = aes(x = sample_id, y = value),
size = 10, pch = '-', color = 'indianred') +
qc_theme
library(dplyr)
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
labs(subtitle = 'Red lines label MAD thresholds.') +
geom_point(data = umi_cutoffs_gg, mapping = aes(x = sample_id, y = value),
size = 10, pch = '-', color = 'indianred') +
qc_theme
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
labs(subtitle = 'Red lines label MAD thresholds.') +
qc_theme
qc_theme <- theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1, color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = 'black'),
panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
# panel.grid.major = element_line(color = 'grey', linetype = 'dashed'),
legend.position = 'none')
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
labs(subtitle = 'Red lines label MAD thresholds.') +
qc_theme
umi_plot
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
qc_theme
umi_plot
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma,
limits = c(0,100000)) +
ylab(label = 'Library size (# UMI)') +
qc_theme
umi_plot
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
qc_theme
umi_plot
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
limits = c(1, 100000),
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
qc_theme
umi_plot
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
limits = c(1000, 100000),
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
qc_theme
umi_plot
n_genes_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = n_genes)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = '# Unique Genes') +
qc_theme
n_genes_plot
n_genes_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = n_genes)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
# breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = '# Unique Genes') +
qc_theme
n_genes_plot
log10(2)
log10(5)
n_genes_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = n_genes)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1), 7*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = '# Unique Genes') +
qc_theme
n_genes_plot
log10(1.5)
n_genes_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = n_genes)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1), 7*10^seq(1,10,1), 2*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = '# Unique Genes') +
qc_theme
n_genes_plot
percent_mt_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = percent_mt)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(0.001, 0.01, 0.03, 0.1, 0.2, 1, unique(percent_mt_cutoffs[,'percent_mt_cutoffs']))) +
ylab(label = 'Mitochondrial [mt-] %')
percent_mt_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = percent_mt)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(0.001, 0.01, 0.03, 0.1, 0.2, 1)) +
ylab(label = 'Mitochondrial [mt-] %')
percent_mt_plot
percent_mt_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = percent_mt)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(0.001, 0.01, 0.03, 0.1, 0.2, 1)) +
ylab(label = 'Mitochondrial [mt-] %') +
qc_theme
percent_mt_plot
qc_theme <- theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1, color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = 'black'),
panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
# panel.grid.major = element_line(color = 'grey', linetype = 'dashed'),
legend.position = 'none')
umi_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = library_size)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
limits = c(1000, 100000),
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = 'Library size (# UMI)') +
qc_theme
n_genes_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = n_genes)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(10^seq(1,10,1), 3*10^seq(1,10,1), 7*10^seq(1,10,1), 2*10^seq(1,10,1)),
labels = scales::comma) +
ylab(label = '# Unique Genes') +
qc_theme
percent_mt_plot <- sci@meta.data %>%
ggplot(mapping = aes(x = sample_id, y = percent_mt)) +
geom_violin(mapping = aes(fill = sample_id), scale = 'width') +
geom_boxplot(mapping = aes(fill = sample_id), outlier.size = 0, width = 0.2) +
scale_y_continuous(trans = 'log10',
breaks = c(0.001, 0.01, 0.03, 0.1, 0.2, 1)) +
ylab(label = 'Mitochondrial [mt-] %') +
qc_theme
qc_plot <- umi_plot + n_genes_plot + percent_mt_plot
ggsave(filename = './results/revision_figures/qc_plot.tiff',
plot = qc_plot, height = 4, width = 10)
ggsave(filename = './results/revision_figures/qc_plot.tiff',
plot = qc_plot, height = 4, width = 14)
rm(list = ls())
gc()
dev.off()

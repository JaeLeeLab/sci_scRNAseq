)
updateSelectInput(
session = session,
label = 'Group violin by:',
inputId = 'vln.group.by',
selected = 'L2_taxon',
choices = categorical_data
)
## expression_gene1_UMAPplot ----
output$expression_gene1_UMAPplot <- renderPlot(expr = {
expression_gene1_UMAPplot(gene1 = input$gene1, dataset = input$dataset)
})
# ## expression_gene2_UMAPplot ----
output$expression_gene2_UMAPplot <- renderPlot(expr = {
expression_gene2_UMAPplot(gene2 = input$gene2, dataset = input$dataset)
})
# ## expression_gene1_VlnPlot ----
output$expression_gene1_VlnPlot <- renderPlot(expr = {
expression_gene1_VlnPlot(
gene1 = input$gene1,
dataset = input$dataset,
group.by = input$vln.group.by
)
})
## expression_gene2_VlnPlot ----
output$expression_gene2_VlnPlot <- renderPlot(expr = {
expression_gene2_VlnPlot(
gene2 = input$gene2,
dataset = input$dataset,
group.by = input$vln.group.by
)
})
}
shiny::shinyApp(ui = ui, server = server)
rm(list = ls())
gc()
dev.off()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jameschoi94', token='B6DED364E916B2EE9E37829D26BAEC32', secret='zYfJs5Jd153+BmhEt9FdZ2PeyDEn5gKl+vS8V0q9')
getwd()
rsconnect::deployApp('shinyApp')
?rsconnect::deployApp()
accounts()
accounts()
rsconnect:accounts()
rsconnect::accounts()
accountInfo('jameschoi94')
rsconnect::accountInfo('jameschoi94')
rsconnect::accountInfo('jsc228')
rsconnect::removeAccount(name = 'jsc228')
rsconnect::deployApp('shinyApp')
x_sci <- readRDS(file = './shinyApp/x_sci.rds')
gene <- rownames(x_sci)
numerical_data <- c(rownames(x_sci), colnames(obs_sci)[grepl('numeric', sapply(obs_sci, class))])
vars_sci <- read.csv(file = './shinyApp/vars_sci.csv', header = FALSE, row.names = 1)
obs_sci <- read.csv(file = './shinyApp/obs_sci.csv', row.names = 1)
gene <- rownames(x_sci)
numerical_data <- c(rownames(x_sci), colnames(obs_sci)[grepl('numeric', sapply(obs_sci, class))])
numerical_data <- numerical_data[!numerical_data %in% gene]
numerical_data <- numerical_data[!grepl('UMAP', numerical_data)]
categorical_data <- c(colnames(obs_sci)[grepl('character', sapply(obs_sci, class))])
save(x_sci, obs_sci, vars_sci, numerical_data, categorical_data, gene,
file = './shinyApp/SCI_portal_data.RData')
rsconnect::deployApp('shinyApp')
log_x_sci <- readRDS(file = './shinyApp/log_x_sci.rds')
# x_sci <- readRDS(file = './data/shinyAppData/x_sci.rds')
log_x_sci <- readRDS(file = './shinyAppData/log_x_sci.rds')
# x_sci <- readRDS(file = './data/shinyAppData/x_sci.rds')
log_x_sci <- readRDS(file = './data//shinyAppData/log_x_sci.rds')
rm(x_sci)
gc()
save(log_x_sci, obs_sci, vars_sci, numerical_data, categorical_data, gene,
file = './shinyApp/SCI_portal_data.RData')
rm(list = ls())
gc()
dev.off()
rsconnect::deployApp('shinyApp')
mem_used()
tidyverse::mem_used()
install.packages('lobstr')
lobstr::mem_used()
gc()
lobstr::mem_used()
gc()
lobstr::mem_used()
lobstr::mem_used()
lobstr::mem_used()
lobstr::mem_used()
lobstr::mem_used()
gc()
lobstr::mem_used()
shiny::runApp('shinyApp')
lobstr::mem_used()
sample_subset <- sample(x = 1:ncol(log_x_sci),
size = ncol(log_sci)/2,
replace = FALSE)
sample_subset <- sample(x = 1:ncol(log_x_sci),
size = ncol(log_x_sci)/2,
replace = FALSE)
saveRDS(sample_subset, file = './data/shinyAppData/sample_subset.rds')
log_x_sci <- log_x_sci[,sample_subset]
obs_sci <- obs_sci[sample_subset,]
save(log_x_sci, obs_sci, vars_sci, numerical_data, categorical_data, gene,
file = './shinyApp/SCI_portal_data.RData')
rsconnect::deployApp('shinyApp')
sample_subset <- sample(x = 1:ncol(log_x_sci),
size = ncol(log_x_sci)/4,
replace = FALSE)
# x_sci <- readRDS(file = './data/shinyAppData/x_sci.rds')
log_x_sci <- readRDS(file = './data/shinyAppData/log_x_sci.rds')
obs_sci <- read.csv(file = './data/shinyAppData/obs_sci.csv', row.names = 1)
vars_sci <- read.csv(file = './data/shinyAppData/vars_sci.csv', header = FALSE, row.names = 1)
# Last minute finishes and data
log_x_sci <- round(log_x_sci, digits = 4)
gene <- rownames(x_sci)
numerical_data <- c(rownames(x_sci), colnames(obs_sci)[grepl('numeric', sapply(obs_sci, class))])
numerical_data <- numerical_data[!numerical_data %in% gene]
numerical_data <- c(rownames(log_x_sci), colnames(obs_sci)[grepl('numeric', sapply(obs_sci, class))])
numerical_data <- numerical_data[!numerical_data %in% gene]
numerical_data <- numerical_data[!grepl('UMAP', numerical_data)]
categorical_data <- c(colnames(obs_sci)[grepl('character', sapply(obs_sci, class))])
sample_subset <- sample(x = 1:ncol(log_x_sci),
size = ncol(log_x_sci)/4,
replace = FALSE)
saveRDS(sample_subset, file = './data/shinyAppData/sample_subset.rds')
log_x_sci <- log_x_sci[,sample_subset]
obs_sci <- obs_sci[sample_subset,]
save(log_x_sci, obs_sci, vars_sci, numerical_data, categorical_data, gene,
file = './shinyApp/SCI_portal_data.RData')
rsconnect::deployApp('shinyApp')
rm(list = ls())
gc()
dev.off()
shiny::runApp('shinyApp')
runApp('shinyApp')
## expression_gene2_VlnPlot ----
expression_gene2_VlnPlot <- function(
gene2 = "Cx3cr1",
dataset = 'macroglia',
group.by = 'L1_taxon'
) {
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene2,])
)
colnames(df) <- c('Group','gene2')
exp_table <- df %>%
group_by('Group') %>%
summarise(ncells = n(),
pct_pos = sum(gene2 > 0)/n() * 100)
exp_table$height <- max(df$gene2)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p2 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene2)) +
geom_violin(scale = 'width') + +
labs(title = paste('Gene 2:', gene2)) +
xlab(label = Group) +
ylab(label = 'normalized exp.') +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells))) +
theme(panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12))
# p2 <- ggplotly(p = p2, width = 425, height = 50) %>%
#   layout(autosize = FALSE)
return(p2)
}
expression_gene1_VlnPlot()
## expression_gene1_VlnPlot ----
expression_gene1_VlnPlot <- function(
gene1 = "Cx3cr1",
dataset = 'macroglia',
group.by = 'L1_taxon'
) {
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene1,])
)
colnames(df) <- c('Group','gene1')
exp_table <- df %>%
group_by('Group') %>%
summarise(ncells = n(),
pct_pos = sum(gene1 > 0)/n() * 100)
exp_table$height <- max(df$gene1)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p1 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene1)) +
geom_violin(scale = 'width') +
labs(title = paste('Gene 1:', gene1)) +
xlab(label = group.by) +
ylab(label = 'normalized exp.') +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells))) +
theme(panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12))
# p1 <- ggplotly(p = p1, width = 425, height = 50) %>%
#   layout(autosize = FALSE)
return(p1)
}
## expression_gene2_VlnPlot ----
expression_gene2_VlnPlot <- function(
gene2 = "Cx3cr1",
dataset = 'macroglia',
group.by = 'L1_taxon'
) {
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene2,])
)
colnames(df) <- c('Group','gene2')
exp_table <- df %>%
group_by('Group') %>%
summarise(ncells = n(),
pct_pos = sum(gene2 > 0)/n() * 100)
exp_table$height <- max(df$gene2)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p2 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene2)) +
geom_violin(scale = 'width') + +
labs(title = paste('Gene 2:', gene2)) +
xlab(label = group.by) +
ylab(label = 'normalized exp.') +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells))) +
theme(panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12))
# p2 <- ggplotly(p = p2, width = 425, height = 50) %>%
#   layout(autosize = FALSE)
return(p2)
}
expression_gene1_VlnPlot()
## expression_gene1_VlnPlot ----
expression_gene1_VlnPlot <- function(
gene1 = "Cx3cr1",
dataset = 'macroglia',
group.by = 'L1_taxon'
) {
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene1,])
)
colnames(df) <- c('Group','gene1')
exp_table <- df %>%
group_by('Group') %>%
summarise(ncells = n(),
pct_pos = sum(gene1 > 0)/n() * 100)
exp_table$height <- max(df$gene1)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p1 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene1)) +
geom_violin(scale = 'width') +
labs(title = paste('Gene 1:', gene1)) +
xlab(label = group.by) +
ylab(label = 'normalized exp.')
message('1')
p1 <- p1 +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells)))
message('2')
p1 <- p1 +
theme(panel.background = element_rect(fill = NA, color = 'black'),
panel.border = element_rect(fill = NA, color = 'black'),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12))
# p1 <- ggplotly(p = p1, width = 425, height = 50) %>%
#   layout(autosize = FALSE)
return(p1)
}
expression_gene1_VlnPlot()
gene1 = "Cx3cr1",
dataset = 'macroglia',
group.by = 'L1_taxon'
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene1,])
)
gene1 = "Cx3cr1"
dataset = 'macroglia'
group.by = 'L1_taxon'
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene1,])
)
colnames(df) <- c('Group','gene1')
exp_table <- df %>%
group_by('Group') %>%
summarise(ncells = n(),
pct_pos = sum(gene1 > 0)/n() * 100)
exp_table$height <- max(df$gene1)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p1 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene1)) +
geom_violin(scale = 'width') +
labs(title = paste('Gene 1:', gene1)) +
xlab(label = group.by) +
ylab(label = 'normalized exp.')
p1
message('1')
p1 <- p1 +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells)))
p1
exp_table
df <- data.frame(
obs_sci[grepl(pattern = group.by, x = colnames(obs_sci))],
as.numeric(log_x_sci[gene1,])
)
colnames(df) <- c('Group','gene1')
exp_table <- df %>%
group_by(Group) %>%
summarise(ncells = n(),
pct_pos = sum(gene1 > 0)/n() * 100)
exp_table$height <- max(df$gene1)
exp_table$pct_pos <- round(exp_table$pct_pos, digits = 2)
p1 <- df[!is.na(df$Group),] %>%
ggplot(mapping = aes(x = Group, y = gene1)) +
geom_violin(scale = 'width') +
labs(title = paste('Gene 1:', gene1)) +
xlab(label = group.by) +
ylab(label = 'normalized exp.')
p1
message('1')
p1 <- p1 +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height - 0.1*height,
label = paste('%+:', pct_pos))) +
geom_text(data = exp_table,
mapping = aes(x = Group,
y = height + 0.1*height,
label = paste0('# cells:', ncells)))
p1
rm(list = ls())
gc()
runApp('shinyApp')
rsconnect::deployApp('shinyApp')
list.files()
rsconnect::deployApp('shinyApp')
rsconnect::deployApp('mouseSCI_2021')
rsconnect::accounts()
rsconnect::restartApp()
getwd()
list.files()
setwd('mouseSCI_2021/')
list.files()
rsconnect::deployApp('mouseSCI_2021')
setwd('..')
getwd()
rsconnect::deployApp('mouseSCI_2021')
renv::snapshot()
library('shiny')
library('ggplot2')
source('helper.R')
source('D:/MiamiProject/sci_scRNAseq/mouseSCI_2021/helper.R', echo=TRUE)
getwd()
setwd("mouseSCI_2021/")
library('shiny')
library('ggplot2')
source('helper.R')
expression_gene_splitUMAPplot()
getwd()
rsconnect::deployApp(appDir = getwd(), appName = 'mouseSCI_2021', account = 'jaeleelab')
library(Seurat)
sci <- readRDS(file = '../data/sci.rds')
sci <- readRDS(file = './data/sci.rds')
rm(sci)
gc()
sci <- readRDS(file = './data/sci.rds')
## Myeloid cell-level metadata ----
myeloid <- readRDS(file = './data/myeloid.rds')
DefaultAssay(myeloid) <- 'RNA'
myeloid$L1_taxon <- 'Myeloid'
myeloid$L2_taxon <- myeloid$celltype
myeloid$L3_taxon <- myeloid$myeloid_subcluster
myeloid$preprint_subtype <- myeloid$old_subcluster
myeloid$myeloid_seurat_res.0.35 <- myeloid$integrated_snn_res.0.35
obs_myeloid <- c('L1_taxon','L2_taxon','L3_taxon','celltype','myeloid_subcluster','preprint_subtype','myeloid_seurat_res.0.35')
umap_myeloid <- myeloid[['umap']]@cell.embeddings
colnames(umap_myeloid) <- c('myeloid_UMAP_1','myeloid_UMAP_2')
obs_myeloid <- cbind(myeloid@meta.data[, obs_myeloid], umap_myeloid)
for (i in 1:ncol(obs_myeloid)) {
if (class(obs_myeloid[[i]]) == 'factor') {
obs_myeloid[[i]] <- as.character(obs_myeloid[[i]])
}
}
rm(myeloid, umap_myeloid)
## Vascular cell-level metadata ----
vascular <- readRDS(file = './data/vascular.rds')
DefaultAssay(vascular) <- 'RNA'
vascular$L1_taxon <- 'Vascular'
vascular$L2_taxon <- vascular$celltype
vascular$L3_taxon <- vascular$vascular_subcluster
vascular$preprint_subtype <- plyr::mapvalues(
x = vascular$integrated_snn_res.0.4,
from = 0:8,
to = c('C1-Endothelial', 'C2-Endothelial','Tip Cell','A-Endothelial','U-Vascular','V-Endothelial','Fibroblast','Pericyte','VSMC')
)
vascular$vascular_seurat_res.0.4 <- vascular$integrated_snn_res.0.4
obs_vascular <- c('L1_taxon','L2_taxon','L3_taxon','celltype','vascular_subcluster','preprint_subtype','vascular_seurat_res.0.4')
umap_vascular <- vascular[['umap']]@cell.embeddings
colnames(umap_vascular) <- c('vascular_UMAP_1','vascular_UMAP_2')
obs_vascular <- cbind(vascular@meta.data[, obs_vascular], umap_vascular)
for (i in 1:ncol(obs_vascular)) {
if (class(obs_vascular[[i]]) == 'factor') {
obs_vascular[[i]] <- as.character(obs_vascular[[i]])
}
}
rm(vascular, umap_vascular)
## Macroglia cell-level metadata ----
macroglia <- readRDS(file = './data/macroglia.rds')
DefaultAssay(macroglia) <- 'RNA'
macroglia$L1_taxon <- 'Macroglia'
macroglia$L2_taxon <- macroglia$celltype
macroglia$L3_taxon <- macroglia$macroglia_subcluster
macroglia$preprint_subtype <- macroglia$macroglia_subcluster
macroglia$macroglia_seurat_res.0.4 <- macroglia$integrated_snn_res.0.4
obs_macroglia <- c('L1_taxon','L2_taxon','L3_taxon','celltype','macroglia_subcluster','preprint_subtype','macroglia_seurat_res.0.4')
umap_macroglia <- macroglia[['umap']]@cell.embeddings
colnames(umap_macroglia) <- c('macroglia_UMAP_1','macroglia_UMAP_2')
obs_macroglia <- cbind(macroglia@meta.data[, obs_macroglia], umap_macroglia)
for (i in 1:ncol(obs_macroglia)) {
if (class(obs_macroglia[[i]]) == 'factor') {
obs_macroglia[[i]] <- as.character(obs_macroglia[[i]])
}
}
rm(macroglia, umap_macroglia)
DefaultAssay(sci) <- 'RNA'
match_metadata <- function(order.char, obs.ls, col.char) {
meta_dat <- rep(x = NA, times = length(order.char))
for (i in 1:length(obs.ls)) {
if (col.char %in% colnames(obs.ls[[i]])) {
meta_match <- match(x = rownames(obs.ls[[i]]),
table = order.char)
meta_dat[meta_match] <- obs.ls[[i]][, col.char]
}
}
return(meta_dat)
}
cols_transfer <- c('celltype','myeloid_subcluster','vascular_subcluster','macroglia_subcluster','L1_taxon','L2_taxon','L3_taxon','preprint_subtype','myeloid_seurat_res.0.35','vascular_seurat_res.0.4','macroglia_seurat_res.0.4','myeloid_UMAP_1','myeloid_UMAP_2','vascular_UMAP_1','vascular_UMAP_2','macroglia_UMAP_1','macroglia_UMAP_2')
obs_transfer <- lapply(
X = cols_transfer,
FUN = match_metadata,
order.char = rownames(sci@meta.data),
obs.ls = list(obs_myeloid, obs_vascular, obs_macroglia)
)
obs_transfer <- data.frame(
x = lapply(
X = cols_transfer,
FUN = match_metadata,
order.char = rownames(sci@meta.data),
obs.ls = list(obs_myeloid, obs_vascular, obs_macroglia)
)
)
colnames(obs_transfer) <- cols_transfer
umap_sci <- sci[['umap']]@cell.embeddings
colnames(umap_sci) <- c('sci_UMAP_1','sci_UMAP_2')
cols_sci <- c('sample_id','time','orig.ident','nCount_RNA','nFeature_RNA','S.Score','G2M.Score','Phase','CC.Difference','percent_mt','percent_rp','percent_hbb','doublet_scores','dissociationMethod','chemistry')
obs_sci <- do.call(what = cbind, args = list(obs_transfer, sci@meta.data[, cols_sci], umap_sci))
obs_sci <- obs_sci[match(x = colnames(x_sci), table = rownames(obs_sci)),]
for (i in 1:ncol(obs_sci)) {
if (class(obs_sci[[i]]) == 'factor') {
obs_sci[[i]] <- as.character(obs_sci[[i]])
}
}
obs_sci
head(obs_sci)
colnames(obs_sci)
colnames(sci@meta.data)
sci@meta.data <- obs_sci
DimPlot(sci, 'myeloid_subcluster')
DimPlot(sci, group.by = 'myeloid_subcluster')
saveRDS(file = 'G:/Shared drives/Current Members/1-Lab Common Folder/Lee Lab R Data/sci_scSeq/sci.rds')
saveRDS(object = sci, file = 'G:/Shared drives/Current Members/1-Lab Common Folder/Lee Lab R Data/sci_scSeq/sci.rds')
